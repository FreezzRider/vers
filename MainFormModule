
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДатаПриема 					= '20210901';
	ДатаНачалаНачислений 		= '20210901';
	ДатаОкончанияНачислений 	= '20211231';
	
	Должность = Справочники.Должности.НайтиПоНаименованию("Студент");
	ГрафикРаботы = Справочники.ГрафикиРаботыСотрудников.НайтиПоНаименованию("Стипендия");
	
	НазначатьНачисления 			= Истина;
	НазначатьПрофсоюзныеВзносы 		= Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВсе(Команда)
	
	Если ОдноПодразделение И Не ЗначениеЗаполнено(Подразделение) Тогда 
		Сообщить("Подразделение не заполнено");
		Возврат;
	КонецЕсли;

	
	ЗагрузитьНаСервере();
	СоздатьДокументыНаСервере();
	
	//ЗагрузитьНаСервереПД();
	//СоздатьДокументыПДНаСервере();
	
	//ЗагрузитьКИНаСервере();
	//ЗаписатьКИНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
	Если ОдноПодразделение И Не ЗначениеЗаполнено(Подразделение) Тогда 
		Сообщить("Подразделение не заполнено");
		Возврат;
	КонецЕсли;
	
	ЗагрузитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументы(Команда)
	СоздатьДокументыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьКИ(Команда)
	ЗаписатьКИНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКИ(Команда)
	ЗагрузитьКИНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПД(Команда)
	ЗагрузитьНаСервереПД();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыПД(Команда)
	//СоздатьДокументыПДНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура ПробныйДокументПриИзменении(Элемент)
	ПробныйДокументПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НачисленияНачислениеПриИзменении(Элемент)
	
	Если СтрНачинаетсяС(Элемент.ТекстРедактирования, "Районный коэффициент") Тогда 
		Элементы.Начисления.ТекущиеДанные.РК = Истина;
		Элементы.Начисления.ТекущиеДанные.Показатель = НайтиПоказатель();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНаСервере()
	ПрочитатьДанные();
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанные() 
	
	ОбработкаОбъект = РеквизитФормыВЗначение ("Объект");
	
	МакетСтуденты 				= ОбработкаОбъект.ПолучитьМакетОбработки("Студенты");
	тзДанныеСтудентов 			= ПреобразоватьТабличныйДокументВТаблицуЗначений(МакетСтуденты);
	
	Для Каждого Строка Из  тзДанныеСтудентов Цикл 
		
		Факультет = Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию(Строка.Факультет);
        Специальность = Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию(Строка.Специальность);
		
		НоваяСтрока = Данные.Добавить();  
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);

		Если ЗначениеЗаполнено(строка.факультет) и ЗначениеЗаполнено(Строка.Специальность)тогда
			Группа = НайтиГруппу(строка);
			НоваяСтрока.Группа = Группа;
		КонецЕсли; 
		
		НоваяСтрока.Факультет = Группа.Родитель.Родитель;
		НоваяСтрока.Специальность = Группа.Родитель;
		
		//Если не ЗначениеЗаполнено(НоваяСтрока.Должность) 
		//	тогда НоваяДолжностьСправочники.ШтатноеРасписание.СоздатьЭлемент() 
		
		НоваяСтрока.ДатаРождения		= СтроковыеФункцииКлиентСервер.СтрокаВДату(Строка.ДатаРождения);
		Если строка.пол = "м" тогда	
			НоваяСтрока.Пол				= Перечисления.ПолФизическогоЛица.Мужской;
		Иначе
			НоваяСтрока.Пол				= Перечисления.ПолФизическогоЛица.Женский;
		КонецЕсли;
		
		ФИО = НоваяСтрока.Фамилия + " " + НоваяСтрока.Имя + " " + НоваяСтрока.Отчество;
		
		Попытка
			НоваяСтрока.Сотрудник = Справочники.Сотрудники.НайтиПоНаименованию(ФИО);
			Исключение
		КонецПопытки;
		
		Если ЗначениеЗаполнено(НоваяСтрока.Факультет) Тогда 
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ШтатноеРасписание.Ссылка КАК Группа
			|ИЗ
			|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
			|ГДЕ
			|	ШтатноеРасписание.Утверждена = ИСТИНА
			|	И ШтатноеРасписание.Подразделение = &ПараметрГруппа";
			
			Запрос.УстановитьПараметр("ПараметрГруппа", Группа);			
			//Запрос.УстановитьПараметр("ПараметрФакультет", 	Факультет);
			//Запрос.УстановитьПараметр("ПараметрСпециальность", 	Специальность);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Выборка = РезультатЗапроса.Выбрать();
			
			
			Пока Выборка.Следующий() Цикл 
				ЗначениеВыборки = Выборка.Группа;
			КонецЦикла;
			
				Если ЗначениеЗаполнено(Выборка.Группа) Тогда
					НоваяСтрока.Должность = ЗначениеВыборки;
				Иначе НоваяПозиция = Справочники.ШтатноеРасписание.СоздатьЭлемент();
					НоваяПозиция.Владелец = Справочники.Организации.НайтиПоНаименованию("ОГАУ");
					НоваяПозиция.Подразделение = Группа;
					НоваяПозиция.Должность = Должность;
					НоваяПозиция.Наименование = Строка(Должность)+ " /" + Строка(Группа) + "/";
					НоваяПозиция.Утверждена = Истина;
					НоваяПозиция.ДатаУтверждения = Дата('20210101');
					НоваяПозиция.Записать(); 
					
				//	РезультатЗапроса = Запрос.Выполнить();
				//
				//	Выборка = РезультатЗапроса.Выбрать();
				//				
				//	Пока Выборка.Следующий() Цикл 
						//НоваяСтрока.Должность = Выборка.Группа;
					НоваяСтрока.Должность = НоваяПозиция;	
					//КонецЦикла;


				КонецЕсли; 
			
			
		КонецЕсли;
		
		ФизическиеЛицаПоФИОИСНИЛС = ФизическиеЛицаЗарплатаКадры.ФизическиеЛицаПоФИОИСНИЛС(НоваяСтрока.Фамилия, НоваяСтрока.Имя, НоваяСтрока.Отчество, НоваяСтрока.СтраховойНомерПФР); 
		
		Если ФизическиеЛицаПоФИОИСНИЛС.Количество() = 1 Тогда  
		    НоваяСтрока.ФизЛицо = ФизическиеЛицаПоФИОИСНИЛС[0];
			НоваяСтрока.Существует = Истина;
		ИначеЕсли ФизическиеЛицаПоФИОИСНИЛС.Количество() > 1 Тогда   
			Сообщить("Найдено несколько физ лиц - " + ФИО);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицу(ТаблицаДанных, ОписаниеТаблицы, НачальнаяСтрока, КонтрольныйСтолбец)Экспорт
	
	МассивСтолбцов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеТаблицы, ",", Истина, Истина);

	Список = Новый ТаблицаЗначений;
	
	Для Каждого ИмяКолонки Из  МассивСтолбцов Цикл
		Список.Колонки.Добавить(ИмяКолонки);
	КонецЦикла;
	
	НомерСтроки = НачальнаяСтрока;
	
	КрутимЦикл = Истина;
	
	Пока КрутимЦикл Цикл
		
		НоваяСтрока = Список.Добавить();
		
		НомерСтолбца = 1;
		
		Для Каждого ИмяКолонки Из  МассивСтолбцов Цикл
			НоваяСтрока[ИмяКолонки] 	= ТаблицаДанных.Область(НомерСтроки, НомерСтолбца, НомерСтроки, НомерСтолбца).Текст;
			НомерСтолбца = НомерСтолбца + 1;	
		КонецЦикла;

		НомерСтроки = НомерСтроки + 1;
		
		КонтрольноеЗначение = ТаблицаДанных.Область(НомерСтроки, КонтрольныйСтолбец, НомерСтроки, КонтрольныйСтолбец).Текст;
		
		КрутимЦикл =  КонтрольноеЗначение <> ""; 
		
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

&НаСервере
Процедура СоздатьДокументыНаСервере()
	
	ДокументыФЛ = ДокументыФизическихЛиц();
	
	ОбработкаОбъект = РеквизитФормыВЗначение ("Объект");
	
	МакетКонтактнаяИнформация 	= ОбработкаОбъект.ПолучитьМакетОбработки("КонтактнаяИнформация");
	МакетПаспортныеДанные 		= ОбработкаОбъект.ПолучитьМакетОбработки("ПаспортныеДанные");
	
	тзКонтактнаяИнформация 		= ПреобразоватьТабличныйДокументВТаблицуЗначений(МакетКонтактнаяИнформация);
	тзПаспортныеДанные 			= ПреобразоватьТабличныйДокументВТаблицуЗначений(МакетПаспортныеДанные);

	тзКонтактнаяИнформация.Колонки.Добавить("Тип");
	тзКонтактнаяИнформация.Колонки.Добавить("Вид");
	тзКонтактнаяИнформация.Колонки.Добавить("Представление");
	
	Для Каждого СтрокаДанных Из Данные Цикл 
		СоздатьФизЛицоИСотрудника(СтрокаДанных, тзПаспортныеДанные, тзКонтактнаяИнформация);
		СоздатьПриемНаРаботу(СтрокаДанных);
		//Прервать;
	КонецЦикла;
	
	//Если НазначатьНачисления Тогда 
	//	НазначитьНачисления();
	//КонецЕсли;

	Если НазначатьПрофсоюзныеВзносы Тогда 
		НазначениеПрофсоюзныхВзносов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьФизЛицоИСотрудника(СтрокаДанных, тзПаспортныеДанные, тзКонтактнаяИнформация);
	
	Если Не СтрокаДанных.Существует Тогда 
		НовоеФизЛицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
	Иначе 
		НовоеФизЛицо = СтрокаДанных.ФизЛицо.ПолучитьОбъект();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовоеФизЛицо, СтрокаДанных); 
	ФИО = СтрокаДанных.Фамилия + " " + СтрокаДанных.Имя + " " + СтрокаДанных.Отчество;
	НовоеФизЛицо.ФИО 			= ФИО;
	НовоеФизЛицо.Наименование 	= ФИО;
	
	НовоеФизЛицо.Записать();
	
	СтрокаДанных.ФизЛицо = НовоеФизЛицо.Ссылка;
	
	Набор = РегистрыСведений.ФИОФизическихЛиц.СоздатьНаборЗаписей();
	Набор.Отбор.ФизическоеЛицо.Установить(НовоеФизЛицо.Ссылка);
	Набор.Очистить();
	
	Запись 					= Набор.Добавить();
	Запись.Фамилия			= СтрокаДанных.Фамилия;
	Запись.Имя				= СтрокаДанных.Имя;
	Запись.Отчество			= СтрокаДанных.Отчество;
	Запись.ФизическоеЛицо	= НовоеФизЛицо.Ссылка;
	Запись.Период			= '20210101';
	
	Набор.Записать();
	
	//СуществующийСчет = Справочники.БанковскиеСчетаКонтрагентов.НайтиПоРеквизиту("НомерСчета", СтрокаДанных.НомерСчета); 
	//Если СуществующийСчет = Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка() тогда 
	НовыйСчет = Справочники.БанковскиеСчетаКонтрагентов.СоздатьЭлемент();
	НовыйСчет.НомерСчета = СтрокаДанных.НомерСчета;
	НовыйСчет.Владелец = СтрокаДанных.ФизЛицо;
	НовыйСчет.Банк = Справочники.КлассификаторБанков.НайтиПоКоду("043601917");
	НовыйСчет.Записать();
	
	//СуществующийСчет = Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка();
	//КонецЕсли; 

	
	СоздатьЗаписьПаспорныхДанных(НовоеФизЛицо.Ссылка, тзПаспортныеДанные); 
	СоздатьЗаписиКонтактнойИнформации(НовоеФизЛицо.Ссылка, тзКонтактнаяИнформация); 
	
	Если не ЗначениеЗаполнено(СтрокаДанных.Сотрудник) тогда
	НовыйСотрудник = Справочники.Сотрудники.СоздатьЭлемент();
	НовыйСотрудник.ФизическоеЛицо = СтрокаДанных.ФизЛицо;
	НовыйСотрудник.Наименование =  ФИО;
	НовыйСотрудник.ГоловнаяОрганизация = Справочники.Организации.НайтиПоНаименованию("ОГАУ");
	НовыйСотрудник.Записать();
	
	СтрокаДанных.Сотрудник = НовыйСотрудник.Ссылка;
	КонецЕсли;

	НовоеМестоВыплаты = РегистрыСведений.МестаВыплатыЗарплатыСотрудников.СоздатьМенеджерЗаписи();
	НовоеМестоВыплаты.Сотрудник = СтрокаДанных.Сотрудник;
	НовоеМестоВыплаты.ФизическоеЛицо = СТрокаДанных.ФизЛицо;
	НовоеМестоВыплаты.вид = Перечисления.ВидыМестВыплатыЗарплаты.БанковскийСчет;
	НовоеМестоВыплаты.МестоВыплаты = НовыйСчет.Ссылка;
	НовоеМестоВыплаты.Записать();

	
КонецПроцедуры // СоздатьФизЛицо()

&НаСервере
Процедура СоздатьПриемНаРаботу(СтрокаДанных)
	
	НовыйДокументПриема = Документы.ПриемНаРаботу.СоздатьДокумент();
	
	НовыйДокументПриема.Организация = Справочники.Организации.НайтиПоНаименованию("ОГАУ");
	НовыйДокументПриема.ВидДоговора 	=  Перечисления.ВидыДоговоровССотрудниками.ТрудовойДоговор;
	НовыйДокументПриема.Сотрудник 		= СтрокаДанных.Сотрудник;
	НовыйДокументПриема.ФизическоеЛицо = СтрокаДанных.ФизЛицо;
	НовыйДокументПриема.Подразделение 	= СтрокаДанных.Группа;
	НовыйДокументПриема.Должность 		= Должность;
	НовыйДокументПриема.КоличествоСтавок = 1;
	НовыйДокументПриема.ДолжностьПоШтатномуРасписанию = СтрокаДанных.Должность;
	НовыйДокументПриема.ДатаПриема 		= ДатаПриема;	
	НовыйДокументПриема.ГрафикРаботы 	= ГрафикРаботы; 
	НовыйДокументПриема.ОтразитьВТрудовойКнижке = Ложь;	
	НовыйДокументПриема.Дата 			= ДатаПриема;
	НовыйДокументПриема.ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы;
	НовыйДокументПриема.СпособРасчетаАванса = Перечисления.СпособыРасчетаАванса.РасчетомЗаПервуюПоловинуМесяца;
	НовыйДокументПриема.Руководитель = Справочники.ФизическиеЛица.НайтиПоНаименованию("Мирошниченко Игорь Васильевич", Истина);
	НовыйДокументПриема.ДолжностьРуководителя = Справочники.Должности.НайтиПоНаименованию("Ректор", Истина);
	
	//НоваяСтрокаНачислений = НовыйДокументПриема.Начисления.Добавить();
	//
	//НоваяСтрокаНачислений.Начисление 						= ПланыВидовРасчета.Начисления.НайтиПоНаименованию("Районный коэффициент ст", Истина);
	//НоваяСтрокаНачислений.Размер 							= 0;
	//НоваяСтрокаНачислений.ИдентификаторСтрокиВидаРасчета 	= 1;
	//
	//НоваяСтрокаПоказатели = НовыйДокументПриема.Показатели.Добавить();
	//
	//НоваяСтрокаПоказатели.Показатель 						= Справочники.ПоказателиРасчетаЗарплаты.НайтиПоНаименованию("Процент Районный коэффициент ст", Истина);
	//НоваяСтрокаПоказатели.Значение							= 15;
	//НоваяСтрокаПоказатели.ИдентификаторСтрокиВидаРасчета 	= 1;
	//
	//НовыйДокументПриема.НачисленияУтверждены = Истина;
	
	НовыйДокументПриема.Комментарий = "Сформирован автоматически " + Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy");
	
	НовыйДокументПриема.Записать(РежимЗаписиДокумента.Запись);
	НовыйДокументПриема.Записать(РежимЗаписиДокумента.Проведение);
	
	
КонецПроцедуры // СоздатьПриемНаРаботу()

&НаСервере
Процедура НазначитьНачисления()
	
	ОбработкаОбъект = РеквизитФормыВЗначение ("Объект");
	
	МакетСтуденты 				= ОбработкаОбъект.ПолучитьМакетОбработки("Студенты");	
	тзДанныеСтудентов 			= ПреобразоватьТабличныйДокументВТаблицуЗначений(МакетСтуденты);
    ВидыВыплат 					= Новый Соответствие;
	
	ВидыВыплат.Вставить("200", ПланыВидовРасчета.Начисления.НайтиПоНаименованию("Повышенная стипендия (100%)")); 
	ВидыВыплат.Вставить("125", ПланыВидовРасчета.Начисления.НайтиПоНаименованию("Повышенная стипендия (25%)"));
	ВидыВыплат.Вставить("100", ПланыВидовРасчета.Начисления.НайтиПоНаименованию("Академическая стипендия"));
	ВидыВыплат.Вставить("Доплата", ПланыВидовРасчета.Начисления.НайтиПоНаименованию("Доплата"));
	ВидыВыплат.Вставить("Староста", ПланыВидовРасчета.Начисления.НайтиПоНаименованию("Староста группы"));
    ВидыВыплат.Вставить("Социальная", ПланыВидовРасчета.Начисления.НайтиПоНаименованию("Социальная стипендия"));

	Для Каждого СтрокаНачислений Из Начисления Цикл 
		
		НовыйДокумент = Документы.НазначениеПлановогоНачисления.СоздатьДокумент();
		НовыйДокумент.Организация = Справочники.Организации.НайтиПоНаименованию("ОГАУ");
		
		НовыйДокумент.Дата 			= ДатаПриема;
		НовыйДокумент.ДатаНазначения 	= ДатаНачалаНачислений;
		НовыйДокумент.ДатаОкончания  	= ДатаОкончанияНачислений;
		

		НовыйДокумент.Начисление       = СтрокаНачислений.Начисление;
		
		НовыйДокумент.Комментарий = "Сформирован автоматически " + Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy");
		
		ИдентификаторСтрокиСотрудника = 1;
		
		Для Каждого СтрокаДанных Из Данные Цикл 
			Если  (СтрокаДанных.Стип = "1739,13" или СтрокаДанных.Стип = "608,7") Тогда
				
			Если СтрокаДанных.Повыш = "100" и НовыйДокумент.Начисление = ВидыВыплат.Получить("200") тогда
								НовыйДокументСотрудник = НовыйДокумент.Сотрудники.Добавить();
								НовыйДокументСотрудник.Сотрудник 						= СтрокаДанных.Сотрудник;
								НовыйДокументСотрудник.ДатаНазначения 					= ДатаНачалаНачислений;
								НовыйДокументСотрудник.ДатаОкончания 					= ДатаОкончанияНачислений;
								НовыйДокументСотрудник.ИдентификаторСтрокиСотрудника  	= ИдентификаторСтрокиСотрудника;
								
								НовыйДокументФизЛицо = НовыйДокумент.ФизическиеЛица.Добавить();
								НовыйДокументФизЛицо.ФизическоеЛицо = СтрокаДанных.ФизЛицо;
								
								Если ЗначениеЗаполнено(СтрокаНачислений.Показатель) Тогда 
									НовыйДокументПоказатели = НовыйДокумент.ПоказателиСотрудников.Добавить();
									НовыйДокументПоказатели.Показатель 						= СтрокаНачислений.Показатель;
									НовыйДокументПоказатели.Значение 						= СтрокаНачислений.Значение;
									НовыйДокументПоказатели.ИдентификаторСтрокиСотрудника  	= ИдентификаторСтрокиСотрудника;
								КонецЕсли;
							
								ИдентификаторСтрокиСотрудника = ИдентификаторСтрокиСотрудника +1;
		
									ИначеЕсли СтрокаДанных.Повыш = "25" и НовыйДокумент.Начисление	= ВидыВыплат.Получить("125") тогда
									НовыйДокументСотрудник = НовыйДокумент.Сотрудники.Добавить();
									НовыйДокументСотрудник.Сотрудник 						= СтрокаДанных.Сотрудник;
									НовыйДокументСотрудник.ДатаНазначения 					= ДатаНачалаНачислений;
									НовыйДокументСотрудник.ДатаОкончания 					= ДатаОкончанияНачислений;
									НовыйДокументСотрудник.ИдентификаторСтрокиСотрудника  	= ИдентификаторСтрокиСотрудника;
									
									НовыйДокументФизЛицо = НовыйДокумент.ФизическиеЛица.Добавить();
									НовыйДокументФизЛицо.ФизическоеЛицо = СтрокаДанных.ФизЛицо;
									
									Если ЗначениеЗаполнено(СтрокаНачислений.Показатель) Тогда 
										НовыйДокументПоказатели = НовыйДокумент.ПоказателиСотрудников.Добавить();
										НовыйДокументПоказатели.Показатель 						= СтрокаНачислений.Показатель;
										НовыйДокументПоказатели.Значение 						= СтрокаНачислений.Значение;
										НовыйДокументПоказатели.ИдентификаторСтрокиСотрудника  	= ИдентификаторСтрокиСотрудника;
									КонецЕсли;
								
									ИдентификаторСтрокиСотрудника = ИдентификаторСтрокиСотрудника +1;

									ИначеЕсли не СтрокаДанных.Стип="0" и НовыйДокумент.Начисление	= ВидыВыплат.Получить("100") тогда
										НовыйДокументСотрудник = НовыйДокумент.Сотрудники.Добавить();
										НовыйДокументСотрудник.Сотрудник 						= СтрокаДанных.Сотрудник;
										НовыйДокументСотрудник.ДатаНазначения 					= ДатаНачалаНачислений;
										НовыйДокументСотрудник.ДатаОкончания 					= ДатаОкончанияНачислений;
										НовыйДокументСотрудник.ИдентификаторСтрокиСотрудника  	= ИдентификаторСтрокиСотрудника;
										
										НовыйДокументФизЛицо = НовыйДокумент.ФизическиеЛица.Добавить();
										НовыйДокументФизЛицо.ФизическоеЛицо = СтрокаДанных.ФизЛицо;
										
										Если ЗначениеЗаполнено(СтрокаНачислений.Показатель) и СтрокаДанных.Стип = "1739,13" Тогда 
											НовыйДокументПоказатели = НовыйДокумент.ПоказателиСотрудников.Добавить();
											НовыйДокументПоказатели.Показатель 						= СтрокаНачислений.Показатель;
											НовыйДокументПоказатели.Значение 						= 2000;
											НовыйДокументПоказатели.ИдентификаторСтрокиСотрудника  	= ИдентификаторСтрокиСотрудника;
										ИначеЕсли ЗначениеЗаполнено(СтрокаНачислений.Показатель) и СтрокаДанных.Стип = "608,7" тогда
												НовыйДокументПоказатели = НовыйДокумент.ПоказателиСотрудников.Добавить();
												НовыйДокументПоказатели.Показатель 						= СтрокаНачислений.Показатель;
												НовыйДокументПоказатели.Значение 						= 700;
												НовыйДокументПоказатели.ИдентификаторСтрокиСотрудника  	= ИдентификаторСтрокиСотрудника;
                                        КонецЕсли;
								
										ИдентификаторСтрокиСотрудника = ИдентификаторСтрокиСотрудника +1; 
																	
										ИначеЕсли не СтрокаДанных.Допл="0" и НовыйДокумент.Начисление	= ВидыВыплат.Получить("Доплата") тогда
											НовыйДокументСотрудник = НовыйДокумент.Сотрудники.Добавить();
											НовыйДокументСотрудник.Сотрудник 						= СтрокаДанных.Сотрудник;
											НовыйДокументСотрудник.ДатаНазначения 					= ДатаНачалаНачислений;
											НовыйДокументСотрудник.ДатаОкончания 					= ДатаОкончанияНачислений;
											НовыйДокументСотрудник.ИдентификаторСтрокиСотрудника  	= ИдентификаторСтрокиСотрудника;
											НовыйДокументСотрудник.Размер  							= СтрокаДанных.Допл;
											
											НовыйДокументФизЛицо = НовыйДокумент.ФизическиеЛица.Добавить();
											НовыйДокументФизЛицо.ФизическоеЛицо = СтрокаДанных.ФизЛицо;
											
											//НовыйДокументПоказатели = НовыйДокумент.ПоказателиСотрудников.Добавить();
											//НовыйДокументПоказатели.Показатель 						= ;
											//НовыйДокументПоказатели.Значение 						= СтрокаДанных.Допл;
											//НовыйДокументПоказатели.ИдентификаторСтрокиСотрудника  	= ИдентификаторСтрокиСотрудника;

								
											ИдентификаторСтрокиСотрудника = ИдентификаторСтрокиСотрудника +1;
											
											ИначеЕсли не СтрокаДанных.Стар="0" и НовыйДокумент.Начисление	= ВидыВыплат.Получить("Староста") тогда
												НовыйДокументСотрудник = НовыйДокумент.Сотрудники.Добавить();
												НовыйДокументСотрудник.Сотрудник 						= СтрокаДанных.Сотрудник;
												НовыйДокументСотрудник.ДатаНазначения 					= ДатаНачалаНачислений;
												НовыйДокументСотрудник.ДатаОкончания 					= ДатаОкончанияНачислений;
												НовыйДокументСотрудник.ИдентификаторСтрокиСотрудника  	= ИдентификаторСтрокиСотрудника;
												
												НовыйДокументФизЛицо = НовыйДокумент.ФизическиеЛица.Добавить();
												НовыйДокументФизЛицо.ФизическоеЛицо = СтрокаДанных.ФизЛицо;
												
												Если ЗначениеЗаполнено(СтрокаНачислений.Показатель) Тогда 
													НовыйДокументПоказатели = НовыйДокумент.ПоказателиСотрудников.Добавить();
													НовыйДокументПоказатели.Показатель 						= СтрокаНачислений.Показатель;
													НовыйДокументПоказатели.Значение 						= СтрокаДанных.Стар;
													НовыйДокументПоказатели.ИдентификаторСтрокиСотрудника  	= ИдентификаторСтрокиСотрудника;
												Иначе
													НовыйДокументСотрудник.Размер  							= СтрокаДанных.Стар;
												КонецЕсли;
								
												ИдентификаторСтрокиСотрудника = ИдентификаторСтрокиСотрудника +1;
												
												ИначеЕсли не СтрокаДанных.Соц="0" и НовыйДокумент.Начисление	= ВидыВыплат.Получить("Социальная") тогда
													НовыйДокументСотрудник = НовыйДокумент.Сотрудники.Добавить();
													НовыйДокументСотрудник.Сотрудник 						= СтрокаДанных.Сотрудник;
													НовыйДокументСотрудник.ДатаНазначения 					= ДатаНачалаНачислений;
													НовыйДокументСотрудник.ДатаОкончания 					= ДатаОкончанияНачислений;
													НовыйДокументСотрудник.ИдентификаторСтрокиСотрудника  	= ИдентификаторСтрокиСотрудника;
													
													НовыйДокументФизЛицо = НовыйДокумент.ФизическиеЛица.Добавить();
													НовыйДокументФизЛицо.ФизическоеЛицо = СтрокаДанных.ФизЛицо;
													
													Если ЗначениеЗаполнено(СтрокаНачислений.Показатель) Тогда 
														НовыйДокументПоказатели = НовыйДокумент.ПоказателиСотрудников.Добавить();
														НовыйДокументПоказатели.Показатель 						= СтрокаНачислений.Показатель;
														НовыйДокументПоказатели.Значение 						= СтрокаДанных.Соц;
														НовыйДокументПоказатели.ИдентификаторСтрокиСотрудника  	= ИдентификаторСтрокиСотрудника;
													Иначе
														НовыйДокументСотрудник.Размер  							= СтрокаДанных.Соц;
												КонецЕсли;
								
												ИдентификаторСтрокиСотрудника = ИдентификаторСтрокиСотрудника +1;


                              КонецЕсли;
						КонецЕсли;
			
		КонецЦикла;
		
		НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НазначениеПрофсоюзныхВзносов()
	
	НовыйДокумент = Документы.УдержаниеПрофсоюзныхВзносов.СоздатьДокумент();
	НовыйДокумент.Организация = Справочники.Организации.НайтиПоНаименованию("ОГАУ");
	
	НовыйДокумент.Дата 				= ДатаПриема;
	НовыйДокумент.ДатаНачала	 	= ДатаПриема;
	НовыйДокумент.Действие 			= Перечисления.ДействияСУдержаниями.Начать;
	НовыйДокумент.ПрофсоюзнаяОрганизация = Справочники.Контрагенты.НайтиПоНаименованию("Контрагент", Истина);
				  
	НовыйДокумент.Удержание       = ПланыВидовРасчета.Удержания.НайтиПоНаименованию("Профвзносы", Истина);
	
	НовыйДокумент.Комментарий = "Сформирован автоматически " + Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy");
	
	ИдентификаторСтрокиВидаРасчета = 1;
	
	Для Каждого СтрокаДанных Из Данные Цикл 
		
		НовыйДокументСотрудник = НовыйДокумент.Удержания.Добавить();
		
		НовыйДокументСотрудник.РабочееМесто 			= СтрокаДанных.Сотрудник;
		
		НовыйДокументСотрудник.ФизическоеЛицо 			= СтрокаДанных.ФизЛицо;
		НовыйДокументСотрудник.ИдентификаторСтрокиВидаРасчета  = ИдентификаторСтрокиВидаРасчета;
		
		НовыйДокументПоказатели = НовыйДокумент.Показатели.Добавить();
		
		НовыйДокументПоказатели.Показатель = Справочники.ПоказателиРасчетаЗарплаты.НайтиПоНаименованию("Процент Профвзносы", Истина);
		НовыйДокументПоказатели.Значение = 1;
		НовыйДокументПоказатели.ИдентификаторСтрокиВидаРасчета  = ИдентификаторСтрокиВидаРасчета;
		
		ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета +1;
		
	КонецЦикла;
	
	НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);

	
КонецПроцедуры

&НаСервере
Процедура ПробныйДокументПриИзмененииНаСервере()
	ДокументОбъект = ПробныйДокумент.ПолучитьОбъект();
КонецПроцедуры

&НаСервере
Функция НайтиПоказатель()
	
	Возврат Справочники.ПоказателиРасчетаЗарплаты.НайтиПоНаименованию("Процент Районный коэффициент ст", Истина);
	
КонецФункции 

&НаСервере
Процедура ЗагрузитьНаСервереПД()
	ПрочитатьДанныеПД();
КонецПроцедуры // ЗагрузитьНаСервереПД()

&НаСервере
Процедура ПрочитатьДанныеПД()

	//ДокументыФЛ = ДокументыФизическихЛиц();

	//ОбработкаОбъект = РеквизитФормыВЗначение ("Объект");
	//
	//Макет = ОбработкаОбъект.ПолучитьМакетОбработки("ПаспортныеДанные");
	//
	//ДанныеТаблицы = ПреобразоватьТабличныйДокументВТаблицуЗначений(Макет);	
	//
	//Для Каждого Строка Из  ДанныеТаблицы Цикл 
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	ФизическиеЛица.Ссылка КАК ФизЛицо
	//	|ИЗ
	//	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	//	|ГДЕ
	//	|	ФизическиеЛица.СтраховойНомерПФР = &СтраховойНомерПФР";
	//	
	//	Запрос.УстановитьПараметр("СтраховойНомерПФР", 	Строка.СтраховойНомерПФР);
	//	
	//	РезультатЗапроса = Запрос.Выполнить();
	//	
	//	Выборка = РезультатЗапроса.Выгрузить();
	//	
	//	Если Отладка Тогда 
	//		КрутитьЦикл = Истина;
	//	Иначе 
	//		КрутитьЦикл = Выборка.Количество() = 1
	//	КонецЕсли;
	//	
	//	Если КрутитьЦикл Тогда 
	//		
	//		НоваяСтрока = ПаспортныеДанные.Добавить();
	//		
	//		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	//		
	//		Попытка
	//			НоваяСтрока.ФизЛицо 			= Выборка[0].ФизЛицо;
	//		Исключение
	//		КонецПопытки;
	//		
	//		НоваяСтрока.ВидДокумента		=  ДокументыФЛ.Получить(Строка.ВидДокумента);
	//			
	//		Если НоваяСтрока.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ Тогда   
	//			НоваяСтрока.Серия = Лев(Строка.Серия, 2) + " " + Прав(Строка.Серия, 2);
	//		КонецЕсли;

	//		НоваяСтрока.ДатаВыдачи 			= СтроковыеФункцииКлиентСервер.СтрокаВДату(Строка.ДатаВыдачи);
	//		НоваяСтрока.ДатаРождения 		= СтроковыеФункцииКлиентСервер.СтрокаВДату(Строка.ДатаРождения);

	//		Если Строка.СрокДействия <> "" Тогда   
	//			НоваяСтрока.СрокДействия = СтроковыеФункцииКлиентСервер.СтрокаВДату(Строка.СрокДействия);
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;

КонецПроцедуры // ПрочитатьДанныеПД()

Функция ДокументыФизическихЛиц()
	
	ДокументыФЛ  = Новый Соответствие;
	
	ДокументыФЛ.Вставить("Паспорт гражданина РФ", 			Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ);
	ДокументыФЛ.Вставить("Паспорт иностранного гражданина", Справочники.ВидыДокументовФизическихЛиц.НайтиПоНаименованию("Иностранный паспорт", Истина));
	
	Возврат ДокументыФЛ;
	
КонецФункции

Процедура СоздатьЗаписьПаспорныхДанных(ФизическоеЛицо, тзПаспортныеДанные)
	
	ДокументыФЛ = ДокументыФизическихЛиц();
	
	Отбор = Новый Структура("ФИО", ФизическоеЛицо.ФИО);
	
	СтрокиДанных = тзПаспортныеДанные.НайтиСтроки(Отбор);

	Если СтрокиДанных.Количество() = 1 Тогда  
		
		СтрокаДанных = СтрокиДанных[0];
		
		Попытка
			
			Набор = РегистрыСведений.ДокументыФизическихЛиц.СоздатьНаборЗаписей();
			
			Набор.Отбор.Физлицо.Установить(ФизическоеЛицо);
			
				Запись 											= Набор.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, СтрокаДанных);
				Запись.ВидДокумента								=  ДокументыФЛ.Получить(СтрокаДанных.ВидДокумента);
				
				Если Запись.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ Тогда   
					Запись.Серия 								= Лев(СтрокаДанных.Серия, 2) + " " + Прав(СтрокаДанных.Серия, 2);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДанных.ДатаВыдачи) тогда
					Запись.ДатаВыдачи 							= СтроковыеФункцииКлиентСервер.СтрокаВДату(СтрокаДанных.ДатаВыдачи);
				Иначе
					Запись.ДатаВыдачи							= Дата("01.01.2005 00:00:00");
				КонецЕсли;
				
				Запись.Период 									= Запись.ДатаВыдачи;
				Запись.ЯвляетсяДокументомУдостоверяющимЛичность = Истина; 
				Запись.Представление 							= РегистрыСведений.ДокументыФизическихЛиц.ПредставлениеЗаписи(Запись); 
				Запись.Физлицо		 							= ФизическоеЛицо; 
				Если СтрокаДанных.СрокДействия <> "" Тогда
					Запись.СрокДействия							= СтроковыеФункцииКлиентСервер.СтрокаВДату(СтрокаДанных.СрокДействия);
				КонецЕсли;
			Набор.Записать();
		Исключение
			
		КонецПопытки;

	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьЗаписиКонтактнойИнформации(ФизическоеЛицо, тзКонтактнаяИнформация)
	
	
	Отбор = Новый Структура("ФизическоеЛицо", ФизическоеЛицо.ФИО);
	
	КонтактнаяИнформацияФизЛица  = тзКонтактнаяИнформация.НайтиСтроки(Отбор);
	
	Если КонтактнаяИнформацияФизЛица.Количество() > 0 Тогда  
		
		ФизЛицоОбъект = ФизическоеЛицо.ПолучитьОбъект();
		
		КИФизЛица = ФизЛицоОбъект.КонтактнаяИнформация;
		
		КИФизЛица.Очистить();
		
	КонецЕсли;
	
	Для Каждого Контакт Из КонтактнаяИнформацияФизЛица Цикл 
		
			Если Контакт.ТипКонтакта = "Адрес по прописке физического лица" Тогда

				Контакт.Тип		= Перечисления.ТипыКонтактнойИнформации.Адрес;
				Контакт.Вид		= Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;
	
			//ИначеЕсли Контакт.ТипКонтакта = "Адрес проживания физического лица" Тогда
			//	
			//	Контакт.Тип		= Перечисления.ТипыКонтактнойИнформации.Адрес;
			//	Контакт.Вид		= Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица;
			//	
			//ИначеЕсли Контакт.ТипКонтакта = "Адрес электронной почты" Тогда 
			//	
			//	Контакт.Тип		= Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
			//	Контакт.Вид		= Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица;
			//	
			//ИначеЕсли Контакт.ТипКонтакта = "Телефон" Тогда 
			//	
			//	Контакт.Тип		= Перечисления.ТипыКонтактнойИнформации.Телефон;
			//	Контакт.Вид		= Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица;
				
			КонецЕсли;
			
			Если Контакт.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда  
				Контакт.Представление		= СформироватьПредставлениеАдреса(Контакт);
			КонецЕсли;
		
			Если Контакт.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда  
				ЗаписатьАдрес(КИФизЛица, Контакт);	
			ИначеЕсли Контакт.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда  
				ЗаписатьАдресЭлектроннойПочты(КИФизЛица, Контакт);
			ИначеЕсли Контакт.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда  
				ЗаписатьТелефон(КИФизЛица, Контакт);
			КонецЕсли;
			
			ФизЛицоОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры





&НаСервере
Процедура УдалитьСоздатьДокументыПДНаСервере()
	
	Для Каждого СтрокаДанных Из ПаспортныеДанные Цикл 
		
		Попытка
			
			Набор = РегистрыСведений.ДокументыФизическихЛиц.СоздатьНаборЗаписей();
			Набор.Отбор.Физлицо.Установить(СтрокаДанных.ФизЛицо);
			
			Запись = Набор.Добавить();
			
			ЗаполнитьЗначенияСвойств(Запись, СтрокаДанных);
			
			Запись.Период = СтрокаДанных.ДатаВыдачи;
			
			Запись.ЯвляетсяДокументомУдостоверяющимЛичность = Истина; 
			
			Запись.Представление = РегистрыСведений.ДокументыФизическихЛиц.ПредставлениеЗаписи(Запись); 
			
			Набор.Записать();
			
		Исключение
			
		КонецПопытки;
		
		
	КонецЦикла;
	
КонецПроцедуры

//1.	Фамилия	
//2.	Имя	
//3.	Отчество	
//4.	СНИЛС	
//5.	ДатаРождения	
//6.	ТипАдреса	
//7.	ЗначенияПолей	
//8.	Квартира	
//9.	Корпус	
//10.	Дом	
//11.	Улица	
//12.	НаселенныйПункт	
//13.	Город	
//14.	Район	
//15.	Регион	
//16.	СтранаКодАльфа3	
//17.	СтранаКодАльфа2	
//18.	СтранаНаименованиеПолное	
//19.	Индекс	
//20.	ПредставлениеАдреса	
&НаСервере
Процедура ЗагрузитьКИНаСервере()
	
	Отбор = Новый Структура("Существует", Ложь);
	
	ОбработкаОбъект = РеквизитФормыВЗначение ("Объект");
	
	Макет = ОбработкаОбъект.ПолучитьМакетОбработки("КонтактнаяИнформация");
	
	ДанныеТаблицы = ПреобразоватьТабличныйДокументВТаблицуЗначений(Макет);


	Для Каждого Строка Из  ДанныеТаблицы Цикл 
		
		ФИО = Строка.Фамилия + " " + Строка.Имя + " " + Строка.Отчество;
		Попытка
			ДатаРождения = Дата(Строка.ДатаРождения+" 00:00:00");
		исключение
			ДатаРождения = Дата("01.01.1990 00:00:00");
		КонецПопытки;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизическиеЛица.Ссылка КАК ФизЛицо
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.ФИО = &ФИО
		|	И ФизическиеЛица.ДатаРождения = &ДРождения";
		
		Запрос.УстановитьПараметр("ФИО", 		ФИО);
		Запрос.УстановитьПараметр("ДРождения", 	ДатаРождения);

		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выгрузить();
		
		Если Отладка Тогда 
			КрутитьЦикл = Истина;
		Иначе 
			КрутитьЦикл = Выборка.Количество() = 1
		КонецЕсли;
		
		Если КрутитьЦикл Тогда 
			
			НоваяСтрока = КонтактнаяИнформация.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);

			Попытка
				НоваяСтрока.ФизЛицо 			= Выборка[0].ФизЛицо;
			Исключение
			КонецПопытки;
		
			НоваяСтрока.ДатаРождения 		= СтроковыеФункцииКлиентСервер.СтрокаВДату(СокрЛП(Строка.ДатаРождения));
			
			Если Строка.ТипКонтакта = "Адрес по прописке физического лица" Тогда

				НоваяСтрока.Тип		= Перечисления.ТипыКонтактнойИнформации.Адрес;
				НоваяСтрока.Вид		= Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;
				
			ИначеЕсли Строка.ТипКонтакта = "Адрес проживания физического лица" Тогда
				
				НоваяСтрока.Тип		= Перечисления.ТипыКонтактнойИнформации.Адрес;
				НоваяСтрока.Вид		= Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица;
				
			ИначеЕсли Строка.ТипКонтакта = "Адрес электронной почты" Тогда 
				
				НоваяСтрока.Тип		= Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				НоваяСтрока.Вид		= Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица;
				
			ИначеЕсли Строка.ТипКонтакта = "Телефон" Тогда 
				
				НоваяСтрока.Тип		= Перечисления.ТипыКонтактнойИнформации.Телефон;
				НоваяСтрока.Вид		= Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица;
				
			КонецЕсли;
			
			Если НоваяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда  
				НоваяСтрока.Представление		= СформироватьПредставлениеАдреса(НоваяСтрока);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеЯчейкиМакета(Макет, НомерСтроки, НомерСтолбца)
	
	Возврат СокрЛП(Макет.Область(НомерСтроки, НомерСтолбца, НомерСтроки, НомерСтолбца).Текст);
	
КонецФункции

&НаСервере
Процедура ЗаписатьКИНаСервере()
	
	ФизЛица = КонтактнаяИнформация.Выгрузить();
	
	ФизЛица.Свернуть("ФизЛицо");
	
	Для Каждого СтрокаТаблицы Из ФизЛица Цикл
		
		Если СтрокаТаблицы.ФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда 
			Продолжить;
		КонецЕсли;
			
		Отбор = Новый Структура;
		
		Отбор.Вставить("ФизЛицо", СтрокаТаблицы.ФизЛицо);
		
		КонтактнаяИнформацияФизЛица  = КонтактнаяИнформация.НайтиСтроки(Отбор);
		
		Если КонтактнаяИнформацияФизЛица.Количество() > 0 Тогда  
			
			ФизЛицоОбъект = КонтактнаяИнформацияФизЛица[0].ФизЛицо.ПолучитьОбъект();
		
			КИФизЛица = ФизЛицоОбъект.КонтактнаяИнформация;
				
			КИФизЛица.Очистить();
			
		КонецЕсли;
	
		Для Каждого ДанныеФизЛица Из КонтактнаяИнформацияФизЛица Цикл 
			
			
			Если ДанныеФизЛица.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда  
				ЗаписатьАдрес(КИФизЛица, ДанныеФизЛица);	
			ИначеЕсли ДанныеФизЛица.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда  
				ЗаписатьАдресЭлектроннойПочты(КИФизЛица, ДанныеФизЛица);
			ИначеЕсли ДанныеФизЛица.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда  
				ЗаписатьТелефон(КИФизЛица, ДанныеФизЛица);
			КонецЕсли;
			
			ФизЛицоОбъект.Записать();
			
		КонецЦикла;
	
		//Прервать;
		
	КонецЦикла;

	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьТелефон(КИФизЛица, ДанныеАдреса)
	
	НоваяЗапись = КИФизЛица.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяЗапись, ДанныеАдреса);
	
	НоваяЗапись.ВидДляСписка = НоваяЗапись.Вид;

	Адрес = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияПоПредставлению(ДанныеАдреса.ПредставлениеАдреса, Перечисления.ТипыКонтактнойИнформации.Телефон, Истина);
	
	//Адрес.Value = ДанныеАдреса.ПредставлениеАдреса; 
	
	НоваяЗапись.Значение 		= УправлениеКонтактнойИнформациейСлужебный.СтруктураВСтрокуJSON(Адрес);
	НоваяЗапись.ЗначенияПолей 	= УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзJSONВXML(Адрес, Перечисления.ТипыКонтактнойИнформации.Адрес);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьАдресЭлектроннойПочты(КИФизЛица, ДанныеАдреса)
	
	НоваяЗапись = КИФизЛица.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяЗапись, ДанныеАдреса);
	
	НоваяЗапись.ВидДляСписка = НоваяЗапись.Вид;

	Адрес = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияПоПредставлению(ДанныеАдреса.ПредставлениеАдреса, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Истина);
	
	Адрес.Value = ДанныеАдреса.ПредставлениеАдреса; 
	
	НоваяЗапись.Значение 		= УправлениеКонтактнойИнформациейСлужебный.СтруктураВСтрокуJSON(Адрес);
	НоваяЗапись.ЗначенияПолей 	= УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзJSONВXML(Адрес, Перечисления.ТипыКонтактнойИнформации.Адрес);
	
КонецПроцедуры



&НаСервере
Процедура ЗаписатьАдрес(КИФизЛица, ДанныеАдреса)
	
	НоваяЗапись = КИФизЛица.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяЗапись, ДанныеАдреса);
	
	НоваяЗапись.ВидДляСписка = НоваяЗапись.Вид;
	
	Адрес = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияПоПредставлению(ДанныеАдреса.Представление, Перечисления.ТипыКонтактнойИнформации.Адрес, Истина);
	
	Адрес.addressType = "Административно-территориальный";
	
	РаботаСАдресамиКлиентСервер.ОбновитьПредставлениеАдреса(Адрес, Ложь);
	ПредставлениеАдреса = Адрес.Value;

//	
//	Результат = УправлениеКонтактнойИнформациейСлужебный.ПроверитьАдрес(Адрес);
//	
//	Адрес2 = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияПоПредставлению(ДанныеАдреса.Представление, Перечисления.ТипыКонтактнойИнформации.Адрес, Ложь);
	
	//КонтактнаяИнформацияXDTO 		= УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOПоПредставлению(ДанныеАдреса.Представление, Перечисления.ТипыКонтактнойИнформации.Адрес);
	НоваяЗапись.Значение 		= УправлениеКонтактнойИнформациейСлужебный.СтруктураВСтрокуJSON(Адрес);
	НоваяЗапись.ЗначенияПолей 	= УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзJSONВXML(Адрес, Перечисления.ТипыКонтактнойИнформации.Адрес);
	НоваяЗапись.Представление	= Адрес.Value;
	
	
	
КонецПроцедуры

&НаСервере
Функция СформироватьПредставлениеАдреса(НоваяСтрока)
	
	Представление = "РОССИЯ, " + НоваяСтрока.Индекс;
	
	Если ЗначениеЗаполнено(НоваяСтрока.Город) Тогда 
		
		//Представление = Представление + ", " + НоваяСтрока.Регион;
		Представление = Представление + ", " + НоваяСтрока.Город;
		
		Если ЗначениеЗаполнено(НоваяСтрока.НаселенныйПункт) Тогда 
			
			Представление = Представление + ", " + НоваяСтрока.НаселенныйПункт;
			
		КонецЕсли;
		
	Иначе 
		
		Представление = Представление + ", " + Трег(НоваяСтрока.Регион) + ", " + Трег(НоваяСтрока.Район) + ", " + Трег(НоваяСтрока.НаселенныйПункт);
		
	КонецЕсли;
	
	Представление = Представление + ", " + Трег(НоваяСтрока.Улица)  + ", дом " + Трег(НоваяСтрока.Дом);
	
	Если ЗначениеЗаполнено(НоваяСтрока.Корпус) Тогда 
		
		Представление = Представление + "/" + НоваяСтрока.Корпус;
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НоваяСтрока.Квартира) Тогда 
		
		Представление = Представление + ", квартира " + НоваяСтрока.Квартира;
	
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

&НаСервере
Процедура ФизическоеЛицоПриИзмененииНаСервере()
	
	ФЛ = ФизическоеЛицо.ПолучитьОбъект();
	
	КИ = ФЛ.КонтактнаяИнформация;
	
КонецПроцедуры

&НаКлиенте
Процедура ФизическоеЛицоПриИзменении(Элемент)
	ФизическоеЛицоПриИзмененииНаСервере();
КонецПроцедуры


&НаСервере
Функция ПреобразоватьТабличныйДокументВТаблицуЗначений(ТабДокумент) 
	
	ПоследняяСтрока = ТабДокумент.ВысотаТаблицы;
	ПоследняяКолонка = ТабДокумент.ШиринаТаблицы;
	ОбластьЯчеек = ТабДокумент.Область(1, 1, ПоследняяСтрока, ПоследняяКолонка); 
	// Создаем описание источника данных на основании области ячеек табличного документа.
	ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьЯчеек);  
	// Создаем объект для интеллектуального построения отчетов,
	// указываем источник данных и выполняем построение отчета.
	ПостроительОтчета = Новый ПостроительОтчета; 
	ПостроительОтчета.ИсточникДанных = ИсточникДанных;
	ПостроительОтчета.Выполнить();
	// Результат выгружаем в таблицу значений.
	ТабЗначений = ПостроительОтчета.Результат.Выгрузить();
	
	Возврат ТабЗначений
	
КонецФункции

&НаСервере
Функция НайтиГруппу(строка)
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПодразделенияОрганизаций.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
			|ГДЕ
			|	ПодразделенияОрганизаций.Наименование = &Наименование
			|	И ПодразделенияОрганизаций.Родитель.Наименование = &Специальность
			|	И ПодразделенияОрганизаций.Родитель.Родитель.Наименование = &Факультет";

		Запрос.УстановитьПараметр("Наименование", строка.Группа);
		Запрос.УстановитьПараметр("Специальность", 	строка.Специальность);			
		Запрос.УстановитьПараметр("Факультет", 	Строка.Факультет);
			
		РезультатЗапроса = Запрос.Выполнить(); 
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() цикл
			ТЗ = Выборка.ссылка;
			КонецЦикла;
		Возврат(ТЗ);
	
КонецФункции	


&НаСервере
Процедура НазначитьНачисленияНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры


&НаКлиенте
Процедура НазначитьНачисления1(Команда)
	НазначитьНачисления();
КонецПроцедуры

&НаСервере
Функция ИзменяемыеПоказатели(Начисление)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Начисление", Начисление);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияПоказатели.Показатель,
	|	ПоказателиРасчетаЗарплаты.Идентификатор,
	|	ПоказателиРасчетаЗарплаты.КраткоеНаименование КАК Заголовок,
	|	ПоказателиРасчетаЗарплаты.ДопускаетсяНулевоеЗначение КАК ДопускаетсяНулевоеЗначение,
	|	ПоказателиРасчетаЗарплаты.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
	|	ПоказателиРасчетаЗарплаты.ТипПоказателя
	|ИЗ
	|	ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
	|		ПО НачисленияПоказатели.Показатель = ПоказателиРасчетаЗарплаты.Ссылка
	|ГДЕ
	|	НачисленияПоказатели.Ссылка = &Начисление
	|	И НачисленияПоказатели.ЗапрашиватьПриВводе
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПВРНачисления.Ссылка,
	|	NULL,
	|	ВЫБОР
	|		КОГДА ПВРНачисления.КраткоеНаименование = """"
	|			ТОГДА ПВРНачисления.Наименование
	|		ИНАЧЕ ПВРНачисления.КраткоеНаименование
	|	КОНЕЦ,
	|	ЛОЖЬ,
	|	ПВРНачисления.РеквизитДопУпорядочивания,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.Денежный)
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК ПВРНачисления
	|ГДЕ
	|	ПВРНачисления.Ссылка = &Начисление
	|	И НЕ ПВРНачисления.Рассчитывается
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеквизитДопУпорядочивания";
		
	ИзменяемыеПоказатели = Запрос.Выполнить().Выгрузить();
	ИзменяемыеПоказатели.Индексы.Добавить("Показатель"); 
	
	Возврат ИзменяемыеПоказатели;
	
КонецФункции

&НаКлиенте
Процедура СоздатьПД(Команда)
	СоздатьПДНаСервере();
КонецПроцедуры

&НаСервере
Процедура СоздатьПДНаСервере()
	
		ДокументыФЛ = ДокументыФизическихЛиц();
		
		ОбработкаОбъект = РеквизитФормыВЗначение ("Объект");

		МакетПаспортныеДанные 		= ОбработкаОбъект.ПолучитьМакетОбработки("ПаспортныеДанные");

		тзПаспортныеДанные 			= ПреобразоватьТабличныйДокументВТаблицуЗначений(МакетПаспортныеДанные);
		
		Для каждого СтрокаДанных из Данные цикл
			ФизическоеЛицо = СтрокаДанных.ФизЛицо;
		    СоздатьЗаписьПаспорныхДанных(ФизическоеЛицо, тзПаспортныеДанные);
		КонецЦикла;	
КонецПроцедуры
